#### Rollback to Previous Git Commit
Check the git commit logs in local repository. From that, get the first 7 DIGITS OF THE COMMIT & use the following cmd to rollback to a specific commit.
    git reset commitID

[Shortcut]: To rollback to the previous immediate commit without knowing the commit ID from the log.
    git reset head~1
[Note]: "~1" refers to the number of commits backward to which the code tree will revert.





#### Restoring deleted files in Git
After deleting a file accidenlty, & immediately realize that it was a mistake, use the cmd along with the deleted fileName.
    git ckeckout HEAD fileName

[Note]: This will work regardless of whether the deletion was staged or not.

#### I deleted a file and committed the deletion
[Personal Approach]: Rollback to the previous commit using the "git reset ....." cmd, subsequently, restore the deleted file using the following cmd.
    git reset HEAD~1 OR, git reset commitID
    git checkout HEAD fileName





#### I committed the deletion and then I did more commits
If you deleted a file, committed, then continued work and did more commits, only to find that deleting the file was a mistake, Git still has you covered!
To find the right commit, FIRST CHECK THE HISTORY FOR THE DELETED FILE.
    git log -- fileName

You can either work with the last commit that still had the file, or the commit that deleted the file. In the first case, just checkout the file from that commit.
    git checkout <commit hash> -- <filename>

In the second case, checkout the file from one commit before that.
    git checkout <deletion commit hash>~1 -- <filename>